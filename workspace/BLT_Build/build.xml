<project name="BLTBuild" basedir="../">

	<!-- Allows external ant tasks like <if> to be used -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/BLT_Build/AntLib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- Add the postmodule task. This task can deploy a module to a local Ignition gateway. -->
	<taskdef name="postmodule" classname="com.inductiveautomation.ant.PostModule">
		<classpath location="${basedir}/BLT_Build/AntLib/ant-post-module.jar" />
	</taskdef>

	<property name="local.gateway.url" value="http://localhost:8088/main/system/DeveloperModuleLoadingServlet" />

	<property name="p200props" value="${basedir}/BLT_Build/pack200.properties" />

	<tstamp>
		<format property="build.date" pattern="MM/dd/yyyy HH:mm" />
	</tstamp>

	<!-- SDK jar classpath. This classpath includes all the jars needed to build a module against the SDK. -->
	<path id="ignition-sdk.classpath">
		<fileset dir="${basedir}/../../ignition-80/lib" includes="*.jar" />
	</path>
	
	<!-- External jar classpath. This classpath includes all the jars needed to build a module against the SDK. -->
	<path id="ExternalJar.classpath">
		 <fileset dir="${basedir}/../../external/lib" includes="ils-*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="commons-lang3*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="commons-math3*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="jackson-*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="jcommon*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="jfreechart*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="jython-*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="logback*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="log4j*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="lucene*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="prefuse*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="slf4j-*.jar" />
		 <fileset dir="${basedir}/../../external/lib" includes="sqlite-jdbc*.jar" />
	</path>
	
	<!-- Generic Buildfile (reference via Antcalls) -->
	<target name="MakeProject">
		<echo message="Compiling ${modName}" />
		<mkdir dir="${basedir}/BLT_Build/bin/${modName}/bin" />
		<echo message="Compiling ${sourceDirFolder}" />
		<javac srcdir="${sourceDirFolder}/src" destdir="${basedir}/BLT_Build/bin/${modName}/bin"
			   debug="true" fork="true"
				memoryinitialsize="128m" memorymaximumsize="512m" debuglevel="lines,vars,source"
				includeantruntime="false">
			<classpath refid="${module.build.classpath}" />
			<exclude name="**/test/*" />
		</javac>
		<echo message="Copying ${modName}" />
		<copy todir="${basedir}/BLT_Build/bin/${modName}/bin">
			<fileset dir="${basedir}/${sourceDirFolder}/src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<echo message="If ${explodelib}" />
		<if>
			<equals arg1="${explodeLib}" arg2="true" />
			<then>
				<unzip dest="${basedir}/BLT_Build/bin/${modName}/bin">
					<fileset dir="${sourceDirFolder}/lib">
						<include name="*.jar" />
					</fileset>
				</unzip>
			</then>
		</if>

		<echo message="Replacing properties .." />
		<propertyselector property="replace.list" delimiter="," match="\[replace\](.*)" select="\1" />
		<if>
			<isset property="replace.list" />
			<then>
				<foreach list="${replace.list}" delimiter="," target="MakeProject-ReplaceProps" param="replace.path" inheritall="true" />
			</then>
		</if>

		<echo message="Making distribution directory ..." />
		<delete dir="${basedir}/BLT_Build/bin/${modName}/dist" />
		<mkdir dir="${basedir}/BLT_Build/bin/${modName}/dist" />

		<jar destfile="${basedir}/BLT_Build/bin/${modName}/dist/${jarName}.jar">
			<fileset dir="${basedir}/BLT_Build/bin/${modName}/bin" />
		</jar>
	</target>

	<!-- Generic SignModule (reference via Antcalls) -->
	<target name="SignModule">
		<echo message="Signing ${moduleName}" />
		<java jar="${basedir}/../../external/lib/module-signer.jar"  fork="true">
			<arg value="-keystore=${basedir}/../../tools/keys/ILSA-keystore"/>
			<arg value="-keystore-pwd=ILS-Automation"/>
			<arg value="-alias=ILSAutomationKey"/>
			<arg value="-alias-pwd=chromsmart" />
			<arg value="-chain=${basedir}/../../tools/keys/ilsautomationcertificate.p7b"/>
			<arg value="-module-in=${modulein}"/>
			<arg value="-module-out=${moduleout}"/>
		</java>
	</target>
	<!-- Uses some property magic to get passed parameters and replace properties in a .properties file  -->
	<target name="MakeProject-ReplaceProps">

		<!-- Called for each instance of a property name/value pair like this:
			 [replace]myfile.properties:mykey = waahoo!
			 
			 When this is called, it has "replace.path" equal to "myfile.properties:mykey" -->

		<!-- Pulls "myfile.properties" and "mykey" out inter their own properties 
		<propertyregex property="filename" input="${replace.path}" regexp="([^:]+):.*" select="\1" />
		<propertyregex property="key" input="${replace.path}" regexp="[^:]+:(.*)" select="\1" />
-->
		<!-- Copies "waahoo!" into the property "replace.value" 
		<propertycopy name="replace.value" from="[replace]${replace.path}" />
		-->

		<echo message="${filename}:${key}=${replace.value}" />

		<!-- Updates the property file named "myfile.properties" so that the key "mykey" now equals "waahoo!"
		<propertyfile file="${basedir}/BLT_Build/bin/${modName}/bin/${filename}">
			<entry key="${key}" value="${replace.value}" />
		</propertyfile>
		-->
	</target>

</project>