#
# Define attributes that are valid for many tests
#
log: [DATE] [TIME] Start Testing ...
# Define variables of interest
problem = "CSTR_PRODUCT_QUALITY-GDA/CSTR_STAB_PROBLEM-GDA/Cstr_Stab_Problem"

# Use notifications to test values on block outputs
notification: SQC-Diag notificationKey.construct($problem,"STAB_SQC-GDA","out")
notification: SQC-Hi-1-1 notificationKey.construct($problem,"STAB_HIGH_1_OF_1-GDA","out")
notification: SQC-Hi-3-4 notificationKey.construct($problem,"STAB_HIGH_3_OF_4-GDA","out")
notification: SQC-Hi-9-9 notificationKey.construct($problem,"STAB_HIGH_9_OF_9-GDA","out")
notification: SQC-Lo-9-9 notificationKey.construct($problem,"STAB_LOW_9_OF_9-GDA","out")
notification: SQC-Lo-3-4 notificationKey.construct($problem,"STAB_LOW_3_OF_4-GDA","out")
notification: SQC-Lo-1-1 notificationKey.construct($problem,"STAB_LOW_1_OF_1-GDA","out")
notification: And notificationKey.construct($problem,"GDL-AND-GATE-XXX-3639","out")
notification: Or notificationKey.construct($problem,"GDL-OR-GATE-XXX-3640","out")
notification: TimerVal notificationKey.construct($problem,"CSTR-STAB-ELAPSED-TIMER","out")
notification: Delay notificationKey.construct($problem,"CSTR_CATIN_STAB_WAIT-GDA","out")
notification: Latch notificationKey.construct($problem,"EM-GDA-LATCH-XXX-3641","out")
notification: InConnection notificationKey.construct($problem,"CAT_IS_IN_PATH-GDA","out")
notification: OutConnection notificationKey.construct($problem,"STAB_SQC_TO_CRX-GDA","out")
# notification: TestPt notificationKey.construct($problem,"CAT_IS_IN_PATH-GDA-TP-5","out")
# notification: Final-Diag notificationKey.construct($problem,"STAB_PROBLEM_FOR_CSTR-GDA","State")
# notification: TimerState notificationKey.construct($problem,"CSTR-STAB-ELAPSED-TIMER","State")
# notification: TimerInhibiting notificationKey.construct($problem,"CSTR-STAB-ELAPSED-TIMER","Inhibiting")

# Script aliases - module is with respect to script directory

script: resetDiagram diagramProxy.reset(name)
script: setStateForApplication applicationProxy.setState(name,state)
script: setTimeFactor timeFactor.setFactor(factor)

# We need to set the test framework and internal clocks the same
timefactor: 5
setTimeFactor (5)

log: [DATE] [TIME] Completed script aliases and time 

# Tag aliases - use aliases for tag values used in assertions
# Note: For the diag toolkit, the tags that can be directly checked
#       most often correspond to source or sink blocks

# Specify the provider that corresponds to the state of the diagrams and reset diagram to be tested to initialize states  
tagprovider: XOM_ISOLATION
setStateForApplication("CSTR_PRODUCT_QUALITY-GDA","ISOLATED")
resetDiagram ($problem)

# Use tag sets to drive tag values
tagset: stab-sqc LabData/STAB-LAB-DATA/rawValue LabData/STAB-LAB-DATA-SQC/target LabData/STAB-LAB-DATA-SQC/standardDeviation Site/SINGLE-PERMISSIVES/STAB_GRADE_FLAG/rawValue site/SINGLE-PERMISSIVES/STAB_SQC_FLAG/badValue
tagset: externaldata Connections/CatIsIn-b

status: setup complete.
